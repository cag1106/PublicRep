Description: Upstream changes introduced in version 5.6.1-4
 This patch has been created by dpkg-source during the package build.
 Here's the last changelog entry, hopefully it gives details on why
 those changes were made:
 .
 vtk (5.6.1-4) unstable; urgency=low
 .
   * vtkEncodeString is in /usr/lib/vtk-5.6 (Closes: #618519)
   * replace doxygen and texlive build dependencies with doxygen-latex
    (Closes: #616284)
   * Re-apply commit 4e1dd55 which had not been merged into 5.6.0.
     Added Break and Replace control fields (Closes: #601992, #601994)
 .
 The person named in the Author field signed this changelog entry.
Author: Dominique Belhachemi <domibel@debian.org>
Bug-Debian: http://bugs.debian.org/601992
Bug-Debian: http://bugs.debian.org/601994
Bug-Debian: http://bugs.debian.org/616284
Bug-Debian: http://bugs.debian.org/618519

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- vtk-5.6.1.orig/vtkGenerateVTKConfig.cmake
+++ vtk-5.6.1/vtkGenerateVTKConfig.cmake
@@ -242,7 +242,7 @@ IF(VTK_WRAP_JAVA)
   SET(VTK_WRAP_JAVA_EXE_CONFIG ${DOLLAR}{VTK_INSTALL_PREFIX}${VTK_INSTALL_BIN_DIR}/vtkWrapJava${VTK_EXE_EXT})
   SET(VTK_JAVA_JAR_CONFIG ${DOLLAR}{VTK_INSTALL_PREFIX}${VTK_INSTALL_JAVA_DIR}/vtk.jar)
 ENDIF(VTK_WRAP_JAVA)
-SET(VTK_ENCODESTRING_EXE_CONFIG ${DOLLAR}{VTK_INSTALL_PREFIX}${VTK_INSTALL_BIN_DIR}/vtkEncodeString${VTK_EXE_EXT})
+SET(VTK_ENCODESTRING_EXE_CONFIG ${DOLLAR}{VTK_INSTALL_PREFIX}${VTK_INSTALL_LIB_DIR}/vtkEncodeString${VTK_EXE_EXT})
 
 # VTK style script locations.
 SET(VTK_DOXYGEN_HOME_CONFIG ${DOLLAR}{VTK_INSTALL_PREFIX}${VTK_INSTALL_DOXYGEN_DIR})
--- vtk-5.6.1.orig/CMake/KitCommonPythonWrapBlock.cmake
+++ vtk-5.6.1/CMake/KitCommonPythonWrapBlock.cmake
@@ -52,6 +52,16 @@ IF(PYTHON_ENABLE_MODULE_vtk${KIT}Python)
   # vtkpython executable in the build tree should have the needed
   # RPATH anyway.
   SET_TARGET_PROPERTIES(vtk${KIT}Python PROPERTIES SKIP_BUILD_RPATH 1)
+
+  set_target_properties(vtk${KIT}PythonD
+      PROPERTIES
+      LINK_INTERFACE_LIBRARIES "${KIT_INTERFACE_LIBRARIES}"
+  )
+
+  set_target_properties(vtk${KIT}Python
+      PROPERTIES
+      LINK_INTERFACE_LIBRARIES ""
+  )
   
   IF(WIN32 OR APPLE)
     TARGET_LINK_LIBRARIES (vtk${KIT}Python ${VTK_PYTHON_LIBRARIES})
--- vtk-5.6.1.orig/CMake/KitCommonTclWrapBlock.cmake
+++ vtk-5.6.1/CMake/KitCommonTclWrapBlock.cmake
@@ -4,6 +4,14 @@ VTK_WRAP_TCL3(vtk${KIT}TCL KitTCL_SRCS
 ADD_LIBRARY(vtk${KIT}TCL ${KitTCL_SRCS} ${Kit_TCL_EXTRA_SRCS})
 SET(KIT_LIBRARY_TARGETS ${KIT_LIBRARY_TARGETS} vtk${KIT}TCL)
 TARGET_LINK_LIBRARIES (vtk${KIT}TCL vtk${KIT} ${KIT_TCL_LIBS})
+
+
+  set_target_properties(vtk${KIT}TCL
+      PROPERTIES
+      LINK_INTERFACE_LIBRARIES "${KIT_INTERFACE_LIBRARIES}"
+  )
+
+
 IF(NOT VTK_INSTALL_NO_LIBRARIES)
   INSTALL(TARGETS vtk${KIT}TCL
     RUNTIME DESTINATION ${VTK_INSTALL_BIN_DIR_CM24} COMPONENT RuntimeLibraries
--- vtk-5.6.1.orig/CMake/vtkWrapJava.cmake
+++ vtk-5.6.1/CMake/vtkWrapJava.cmake
@@ -133,7 +133,8 @@ MACRO(VTK_GENERATE_JAVA_DEPENDENCIES TAR
   ENDIF (USER_JAVA_CLASSPATH)
 
   SET (OUT_TEXT)
-  SET (classes)
+  SET (sources)
+  SET (driver)
 
   # get the classes for this lib 
   FOREACH(srcName ${ARGN})
@@ -147,17 +148,17 @@ MACRO(VTK_GENERATE_JAVA_DEPENDENCIES TAR
     SET(className "${srcPath}/${srcNameWe}.class")
     SET (OUT_TEXT ${OUT_TEXT} "\n    dummy = new ${srcNameWe}()")
 
-    # On Unix we can just call javac ... *.java 
-    ADD_CUSTOM_COMMAND(
-      OUTPUT "${className}" 
-      COMMAND "${JAVA_COMPILE}" ARGS -classpath "${javaPath}" "${srcPath}/vtk${TARGET}Driver.java"
-      DEPENDS "${srcName}"
-      )
-    
-    SET (classes ${classes} ${className})
+    SET(driver "${srcPath}/vtk${TARGET}Driver.class")
+
+    SET (sources ${sources} ${srcName})
   ENDFOREACH(srcName)
 
-  ADD_CUSTOM_COMMAND(TARGET ${TARGET} SOURCE ${TARGET} DEPENDS ${classes})
+  ADD_CUSTOM_COMMAND(
+    OUTPUT ${driver}
+    COMMAND "${JAVA_COMPILE}" ARGS -source 5 -classpath "${javaPath}" "${srcPath}/vtk${TARGET}Driver.java"
+    DEPENDS ${sources}
+    )
+  ADD_CUSTOM_COMMAND(TARGET ${TARGET} SOURCE ${TARGET} DEPENDS ${driver})
   SET (TARGET_NAME ${TARGET})
   CONFIGURE_FILE(
     ${VTK_CMAKE_DIR}/vtkJavaDriver.java.in 
--- vtk-5.6.1.orig/Wrapping/Tcl/CMakeLists.txt
+++ vtk-5.6.1/Wrapping/Tcl/CMakeLists.txt
@@ -74,7 +74,7 @@ ENDIF(VTK_USE_CARBON)
 
 IF (VTK_USE_RENDERING)
   TARGET_LINK_LIBRARIES(vtk vtkRenderingTCL)
-  TARGET_LINK_LIBRARIES(vtk vtkVolumeRenderingTCL)
+  TARGET_LINK_LIBRARIES(vtk vtkVolumeRenderingTCL vtkVolumeRendering)
   TARGET_LINK_LIBRARIES(vtk vtkHybridTCL)
   TARGET_LINK_LIBRARIES(vtk vtkWidgetsTCL)
 ENDIF (VTK_USE_RENDERING)
@@ -84,7 +84,7 @@ IF (VTK_USE_PARALLEL)
 ENDIF (VTK_USE_PARALLEL)
 
 IF (VTK_USE_GEOVIS)
-  TARGET_LINK_LIBRARIES(vtk vtkGeovisTCL)
+  TARGET_LINK_LIBRARIES(vtk vtkGeovisTCL vtkGeovis)
 ENDIF (VTK_USE_GEOVIS)
 
 IF (VTK_USE_INFOVIS)
@@ -148,16 +148,22 @@ IF (VTK_USE_PARALLEL)
       vtkIOTCL
       vtkParallelTCL
       ${MPI_LIBRARIES}
+      ${VTK_TCL_LIBRARIES}
     )
 
+    IF (VTK_USE_TK)
+       TARGET_LINK_LIBRARIES(pvtk ${VTK_TK_LIBRARIES})
+    ENDIF (VTK_USE_TK)
+
     IF (VTK_USE_RENDERING)
       TARGET_LINK_LIBRARIES(pvtk vtkHybridTCL)
       TARGET_LINK_LIBRARIES(pvtk vtkWidgetsTCL)
-      TARGET_LINK_LIBRARIES(pvtk vtkVolumeRenderingTCL)
+      TARGET_LINK_LIBRARIES(pvtk vtkRenderingTCL)
+      TARGET_LINK_LIBRARIES(pvtk vtkVolumeRenderingTCL vtkVolumeRendering)
     ENDIF (VTK_USE_RENDERING)
 
     IF (VTK_USE_GEOVIS)
-      TARGET_LINK_LIBRARIES(pvtk vtkGeovisTCL)
+      TARGET_LINK_LIBRARIES(pvtk vtkGeovisTCL vtkGeovis)
     ENDIF (VTK_USE_GEOVIS)
 
     IF (VTK_USE_INFOVIS)
--- vtk-5.6.1.orig/Wrapping/Java/CMakeLists.txt
+++ vtk-5.6.1/Wrapping/Java/CMakeLists.txt
@@ -206,7 +206,7 @@ IF(JAVA_COMPILE)
         OUTPUTS ${class}
         DEPENDS ${VTK_JAVA_HOME}/vtkPanel.java ${VTK_JAVA_HOME}/Algorithm.java
         COMMAND ${JAVA_COMPILE}
-        ARGS -classpath ${VTK_JAVA_HOME}/.. -d ${VTK_JAVA_HOME}/.. ${dst}
+        ARGS -source 5 -classpath ${VTK_JAVA_HOME}/.. -d ${VTK_JAVA_HOME}/.. ${dst}
         )
 
       SET(CLASS_FILES ${CLASS_FILES} ${class})
--- vtk-5.6.1.orig/Utilities/CMakeLists.txt
+++ vtk-5.6.1/Utilities/CMakeLists.txt
@@ -35,7 +35,8 @@ SET( verdict_INSTALL_BIN_DIR ${VTK_INSTA
 SET( verdict_INSTALL_LIB_DIR ${VTK_INSTALL_LIB_DIR_CM24})
 SUBDIRS(verdict)
 
-SUBDIRS(vtknetcdf)
+#SUBDIRS(vtknetcdf)
+
 IF(VTK_USE_METAIO)
   SUBDIRS(vtkmetaio)
 ENDIF(VTK_USE_METAIO)
--- vtk-5.6.1.orig/Utilities/vtk_netcdf.h
+++ vtk-5.6.1/Utilities/vtk_netcdf.h
@@ -16,6 +16,9 @@
 #define __vtk_netcdf_h
 
 /* Use the netcdf library configured for VTK.  */
-#include <vtknetcdf/netcdf.h>
+//#include <vtknetcdf/netcdf.h>
+
+/* Use Debian's netcdf */
+#include <netcdf.h>
 
 #endif
--- vtk-5.6.1.orig/Utilities/vtk_netcdfcpp.h
+++ vtk-5.6.1/Utilities/vtk_netcdfcpp.h
@@ -16,6 +16,9 @@
 #define __vtk_netcdfcpp_h
 
 /* Use the netcdf library configured for VTK.  */
-#include <vtknetcdf/netcdfcpp.h>
+//#include <vtknetcdf/netcdfcpp.h>
+
+#include <netcdfcpp.h>
+
 
 #endif
--- vtk-5.6.1.orig/Utilities/Cosmo/CMakeLists.txt
+++ vtk-5.6.1/Utilities/Cosmo/CMakeLists.txt
@@ -35,6 +35,13 @@ INCLUDE_DIRECTORIES (${Cosmo_SOURCE_DIR}
 ADD_LIBRARY(Cosmo ${Cosmo_SOURCES})
 TARGET_LINK_LIBRARIES(Cosmo vtksys vtkCommon ${Cosmo_LIBS})
 
+# Apply user-defined properties to the library targets.
+IF(VTK_LIBRARY_PROPERTIES)
+  SET_TARGET_PROPERTIES(Cosmo PROPERTIES
+    ${VTK_LIBRARY_PROPERTIES}
+    )
+ENDIF(VTK_LIBRARY_PROPERTIES)
+
 IF(NOT VTK_INSTALL_NO_LIBRARIES)
   INSTALL(TARGETS Cosmo
     RUNTIME DESTINATION ${VTK_INSTALL_BIN_DIR_CM24} COMPONENT RuntimeLibraries
--- vtk-5.6.1.orig/Utilities/VPIC/CMakeLists.txt
+++ vtk-5.6.1/Utilities/VPIC/CMakeLists.txt
@@ -24,6 +24,14 @@ INCLUDE_DIRECTORIES (${VPIC_SOURCE_DIR}
 
 ADD_LIBRARY(VPIC ${VPIC_SOURCES})
 TARGET_LINK_LIBRARIES(VPIC vtksys )
+
+# Apply user-defined properties to the library targets.
+IF(VTK_LIBRARY_PROPERTIES)
+  SET_TARGET_PROPERTIES(VPIC PROPERTIES
+    ${VTK_LIBRARY_PROPERTIES}
+    )
+ENDIF(VTK_LIBRARY_PROPERTIES)
+
 IF(VTK_USE_MPI)
 TARGET_LINK_LIBRARIES(VPIC ${MPI_LIBRARY})
   IF(MPI_EXTRA_LIBRARY)
--- vtk-5.6.1.orig/Utilities/DICOMParser/DICOMParser.cxx
+++ vtk-5.6.1/Utilities/DICOMParser/DICOMParser.cxx
@@ -41,6 +41,7 @@
 
 #include <string.h>
 #include <string>
+#include <cstring>
 
 // Define DEBUG_DICOM to get debug messages sent to dicom_stream::cerr
 // #define DEBUG_DICOM
--- vtk-5.6.1.orig/Utilities/vtkexodus2/CMakeLists.txt
+++ vtk-5.6.1/Utilities/vtkexodus2/CMakeLists.txt
@@ -213,7 +213,7 @@ ENDIF(APPLE)
 
 
 ADD_LIBRARY(vtkexoIIc ${cbind_SRCS})
-TARGET_LINK_LIBRARIES(vtkexoIIc vtkNetCDF)
+TARGET_LINK_LIBRARIES(vtkexoIIc netcdf)
 
 # Apply user-defined properties to the library target.
 IF(VTK_LIBRARY_PROPERTIES)
--- vtk-5.6.1.orig/Utilities/vtkexodus2/test/CMakeLists.txt
+++ vtk-5.6.1/Utilities/vtkexodus2/test/CMakeLists.txt
@@ -21,7 +21,7 @@ CREATE_TEST_SOURCELIST( ExoIICTests
   )
 
 ADD_EXECUTABLE( ExoIICTests ${ExoIICTests} )
-TARGET_LINK_LIBRARIES( ExoIICTests vtkCommon vtkexoIIc vtkNetCDF )
+TARGET_LINK_LIBRARIES( ExoIICTests vtkCommon vtkexoIIc netcdf )
 
 SET( TestsToRun ${ExoIICTests} )
 REMOVE( TestsToRun ExoIICTests.cxx )
--- vtk-5.6.1.orig/Geovis/CMakeLists.txt
+++ vtk-5.6.1/Geovis/CMakeLists.txt
@@ -4,7 +4,7 @@ SET(KIT_TCL_LIBS vtkWidgetsTCL vtkViewsT
 SET(KIT_PYTHON_LIBS vtkWidgetsPythonD vtkViewsPythonD)
 SET(KIT_JAVA_LIBS vtkWidgetsJava vtkViewsJava)
 SET(KIT_INTERFACE_LIBRARIES vtkWidgets vtkViews)
-SET(KIT_LIBS ${VTK_LIBPROJ4_LIBRARIES} ${OPENGL_LIBRARIES})
+SET(KIT_LIBS ${VTK_LIBPROJ4_LIBRARIES} ${OPENGL_gl_LIBRARY})
 
 SET( Kit_SRCS
   vtkCompassRepresentation.cxx
--- vtk-5.6.1.orig/Rendering/CMakeLists.txt
+++ vtk-5.6.1/Rendering/CMakeLists.txt
@@ -9,9 +9,7 @@ IF (JAVA_AWT_LIBRARY)
 ENDIF (JAVA_AWT_LIBRARY)
 
 SET(KIT_INTERFACE_LIBRARIES vtkGraphics vtkImaging)
-SET(KIT_LIBS vtkIO vtkftgl
-  ${VTK_FREETYPE_LIBRARIES}
-)
+SET(KIT_LIBS vtkIO vtkftgl)
 #INCLUDE(${VTK_CMAKE_DIR}/vtkTestGL.cmake)
 #INCLUDE(${VTK_CMAKE_DIR}/vtkTestGLX.cmake)
 
@@ -427,9 +425,9 @@ IF(VTK_USE_QT)
   # path in install names. This workaround fixes the problem by forcing all libraries
   # and executables that depend on vtkRendering to also directly link to Qt libraries.
   IF (APPLE)
-    LIST (APPEND KIT_INTERFACE_LIBRARIES ${QT_LIBRARIES})
+    LIST (APPEND KIT_INTERFACE_LIBRARIES QtGui QtCore)
   ELSE (APPLE)
-    LIST (APPEND KIT_LIBS ${QT_LIBRARIES})
+    LIST (APPEND KIT_LIBS QtGui QtCore)
   ENDIF (APPLE)
 
 ENDIF(VTK_USE_QT)
@@ -525,7 +523,6 @@ ELSE (WIN32)
     INCLUDE(CheckFunctionExists)
     SET(VTK_SAVE_CMAKE_REQUIRED_LIBRARIES "${CMAKE_REQUIRED_LIBRARIES}")
     SET(CMAKE_REQUIRED_LIBRARIES
-      ${OPENGL_LIBRARIES}
       ${CMAKE_THREAD_LIBS}
       ${CMAKE_REQUIRED_LIBRARIES}
       -lm
@@ -762,7 +759,7 @@ IF (VTK_WRAP_TCL AND VTK_USE_TK)
   # Use special interactor for X and Tk.
   IF(VTK_USE_X)
     SET(KitTCL_SRCS ${KitTCL_SRCS} vtkXRenderWindowTclInteractor.cxx)
-    SET(KIT_TCL_LIBS ${KIT_TCL_LIBS} ${X11_LIBRARIES})
+    SET(KIT_TCL_LIBS ${KIT_TCL_LIBS} X11)
   ENDIF(VTK_USE_X)
   IF(VTK_USE_CARBON)
     SET(KIT_TCL_LIBS ${KIT_TCL_LIBS} "-framework Carbon")
@@ -809,7 +806,7 @@ IF (VTK_WRAP_PYTHON AND VTK_USE_TK AND T
               ${RenderingPythonTkWidgets_SRCS})
   SET(VTK_PYTHONTK_LIBRARIES ${VTK_TK_LIBRARIES})
   IF(VTK_USE_X)
-    SET(VTK_PYTHONTK_LIBRARIES ${VTK_PYTHONTK_LIBRARIES} ${X11_LIBRARIES})
+    SET(VTK_PYTHONTK_LIBRARIES ${VTK_PYTHONTK_LIBRARIES} X11)
   ENDIF(VTK_USE_X)
   IF(VTK_USE_CARBON)
     SET(VTK_PYTHONTK_LIBRARIES ${VTK_PYTHONTK_LIBRARIES} "-framework Carbon")
@@ -845,7 +842,7 @@ IF(VTK_USE_X)
   IF (X11_Xt_LIB)
     TARGET_LINK_LIBRARIES(vtk${KIT} ${X11_Xt_LIB})
   ENDIF (X11_Xt_LIB)
-  TARGET_LINK_LIBRARIES(vtk${KIT} ${X11_LIBRARIES})
+  TARGET_LINK_LIBRARIES(vtk${KIT} X11)
   IF (VTK_USE_TK)
     # Definitely needed in case we are linking against a Tcl/Tk 8.5 static,
     # which by default seems to be missing Xss and Xft. It can not just be
@@ -854,12 +851,12 @@ IF(VTK_USE_X)
     FIND_LIBRARY(X11_Xscreensaver_LIB Xss ${X11_LIB_SEARCH_PATH})
     MARK_AS_ADVANCED(X11_Xscreensaver_LIB)
     IF(X11_Xscreensaver_LIB)
-      TARGET_LINK_LIBRARIES(vtk${KIT} ${X11_Xscreensaver_LIB})
+#      TARGET_LINK_LIBRARIES(vtk${KIT} ${X11_Xscreensaver_LIB})
     ENDIF(X11_Xscreensaver_LIB)
     FIND_LIBRARY(X11_Xft_LIB Xft ${X11_LIB_SEARCH_PATH})
     MARK_AS_ADVANCED(X11_Xft_LIB)
     IF(X11_Xft_LIB)
-      TARGET_LINK_LIBRARIES(vtk${KIT} ${X11_Xft_LIB})
+#      TARGET_LINK_LIBRARIES(vtk${KIT} ${X11_Xft_LIB})
     ENDIF(X11_Xft_LIB)
     IF(APPLE)
       FIND_LIBRARY(X11_fontconfig_LIB fontconfig ${X11_LIB_SEARCH_PATH})
--- vtk-5.6.1.orig/Parallel/CMakeLists.txt
+++ vtk-5.6.1/Parallel/CMakeLists.txt
@@ -193,7 +193,7 @@ IF (VTK_USE_MPI)
     MESSAGE("Could not find the required MPI libraries")
   ENDIF (MPI_LIBRARY)   
   IF (MPI_EXTRA_LIBRARY)   
-    SET(KIT_LIBS ${KIT_LIBS} "${MPI_EXTRA_LIBRARY}")   
+    SET(KIT_LIBS ${KIT_LIBS} "${MPI_LIBRARY}")   
   ENDIF (MPI_EXTRA_LIBRARY) 
 ENDIF (VTK_USE_MPI)
 
@@ -228,6 +228,8 @@ FOREACH(file ${glsl_files})
 ENDFOREACH(file)
 ENDIF(VTK_USE_RENDERING)
 
+
+
 #-----------------------------------------------------------------------------
 # Include CMake code common to all kits.
 INCLUDE(${VTK_CMAKE_DIR}/KitCommonBlock.cmake)
--- vtk-5.6.1.orig/Charts/CMakeLists.txt
+++ vtk-5.6.1/Charts/CMakeLists.txt
@@ -68,9 +68,9 @@ IF(VTK_USE_QT)
   SET(QT_DONT_USE_QTGUI)
   INCLUDE(${QT_USE_FILE})
   IF (APPLE)
-    LIST (APPEND KIT_INTERFACE_LIBRARIES ${QT_LIBRARIES})
+    LIST (APPEND KIT_INTERFACE_LIBRARIES QtGui QtCore )
   ELSE (APPLE)
-    LIST (APPEND KIT_LIBS ${QT_LIBRARIES})
+    LIST (APPEND KIT_LIBS QtGui QtCore )
   ENDIF (APPLE)
 ENDIF(VTK_USE_QT)
 
--- vtk-5.6.1.orig/IO/vtkMINCImageReader.cxx
+++ vtk-5.6.1/IO/vtkMINCImageReader.cxx
@@ -67,7 +67,7 @@ POSSIBILITY OF SUCH DAMAGES.
 
 #include "vtkMINCImageAttributes.h"
 #include "vtkMINC.h"
-#include "vtknetcdf/netcdf.h"
+#include "vtk_netcdf.h"
 
 #include <stdlib.h>
 #include <ctype.h>
--- vtk-5.6.1.orig/IO/CMakeLists.txt
+++ vtk-5.6.1/IO/CMakeLists.txt
@@ -18,9 +18,9 @@ SET(KIT_TCL_LIBS vtkFilteringTCL)
 SET(KIT_PYTHON_LIBS vtkFilteringPythonD)
 SET(KIT_JAVA_LIBS vtkFilteringJava)
 SET(KIT_INTERFACE_LIBRARIES vtkFiltering)
-SET(KIT_LIBS vtkDICOMParser vtkNetCDF vtkNetCDF_cxx
+SET(KIT_LIBS vtkDICOMParser netcdf netcdf_c++
   ${_VTK_METAIO_LIB} vtksqlite
-  ${VTK_PNG_LIBRARIES} ${VTK_ZLIB_LIBRARIES} ${VTK_JPEG_LIBRARIES}
+  ${VTK_PNG_LIBRARIES} ${VTK_JPEG_LIBRARIES}
   ${VTK_TIFF_LIBRARIES} ${VTK_EXPAT_LIBRARIES} ${VTK_OGGTHEORA_LIBRARIES}
   ${KWSYS_NAMESPACE})
 
--- vtk-5.6.1.orig/IO/vtkSLACReader.cxx
+++ vtk-5.6.1/IO/vtkSLACReader.cxx
@@ -46,7 +46,7 @@
 #define VTK_CREATE(type, name) \
   vtkSmartPointer<type> name = vtkSmartPointer<type>::New()
 
-#include <netcdf.h>
+#include "vtk_netcdf.h"
 
 #include <vtkstd/algorithm>
 #include <vtkstd/map>
--- vtk-5.6.1.orig/IO/vtkMINCImageWriter.cxx
+++ vtk-5.6.1/IO/vtkMINCImageWriter.cxx
@@ -71,7 +71,7 @@ POSSIBILITY OF SUCH DAMAGES.
 
 #include "vtkMINCImageAttributes.h"
 #include "vtkMINC.h"
-#include "vtknetcdf/netcdf.h"
+#include "vtk_netcdf.h"
 
 #ifdef _WIN32
 #include "vtkWindows.h"
--- vtk-5.6.1.orig/IO/vtkSLACParticleReader.cxx
+++ vtk-5.6.1/IO/vtkSLACParticleReader.cxx
@@ -43,7 +43,7 @@
 #define VTK_CREATE(type, name) \
   vtkSmartPointer<type> name = vtkSmartPointer<type>::New()
 
-#include <netcdf.h>
+#include "vtk_netcdf.h"
 
 //=============================================================================
 #define CALL_NETCDF(call)                       \
--- vtk-5.6.1.orig/IO/vtkMINCImageAttributes.cxx
+++ vtk-5.6.1/IO/vtkMINCImageAttributes.cxx
@@ -62,7 +62,7 @@ POSSIBILITY OF SUCH DAMAGES.
 #include "vtkSmartPointer.h"
 
 #include "vtkMINC.h"
-#include "vtknetcdf/netcdf.h"
+#include "vtk_netcdf.h"
 
 #include <stdlib.h>
 #include <ctype.h>
